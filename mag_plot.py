# temp hijacking this
import numpy as np

points = [
	

(0.30018005, -0.014648885, -0.5851009),
(0.29786065, -0.01330607, -0.5881527),
(0.3014008, -0.01208533, -0.5870541),
(0.30127874, -0.018921476, -0.5929136),
(0.29749444, -0.013794366, -0.5908384),
(0.29517502, -0.01574755, -0.59974974),
(0.29273355, -0.023682363, -0.6010926),
(0.29395428, -0.030274361, -0.6037782),
(-0.18701743, -0.20679343, -0.34913176),
(-0.18127994, -0.19861446, -0.37110507),
(-0.17590868, -0.19763787, -0.38001648),
(-0.16577655, -0.18799402, -0.40357676),
(0.3535264, -0.38892788, -0.003540147),
(0.34595782, -0.38575396, 0.007080294),
(0.33960998, -0.38111514, 0.008301035),
(0.33936584, -0.38636434, 0.01208533),
(0.3310648, -0.38514358, 0.018189032),
(0.16772974, -0.48133793, -0.18164617),
(0.16943876, -0.48121586, -0.18176824),
(0.16443373, -0.48182622, -0.1640675),
(0.16528825, -0.47791985, -0.15979491),
(0.15833002, -0.47706535, -0.15063937),
(0.1607715, -0.47621083, -0.1472213),
(0.15918455, -0.47340313, -0.13733329),
(0.1589404, -0.4738914, -0.13476974),
(0.19360943, -0.05505539, -0.5914487),
(0.0026856288, -0.38758507, -0.01721244),
(-0.0043946654, -0.38477737, -0.010864589),
(0.0009765923, -0.38380077, -0.013794366),
(-0.0037842952, -0.3770867, -0.0051271096),
(-0.002929777, -0.3719596, -0.0042725913),
(-0.007202368, -0.36573383, 0.0043946654),
(-0.0145268105, -0.361095, 0.0112308115),
(-0.015991699, -0.35633412, 0.008789331),
(-0.01904355, -0.35670033, 0.010254219),
(-0.15710929, -0.18286692, -0.42567217),
(-0.15112767, -0.17737357, -0.4367809),
(-0.13940856, -0.17139195, -0.45301676),
(0.08496353, -0.10168768, -0.6041444),
(0.08020265, -0.10998871, -0.6006043),
(0.083010346, -0.12390515, -0.59694207),
(0.08386487, -0.13220619, -0.59511095),
(0.07885983, -0.14258248, -0.5960875),
(0.077883236, -0.14526811, -0.59511095),
(-0.19458602, -0.20154424, -0.11658071),
(-0.1932432, -0.19739372, -0.11963256),
(-0.19788201, -0.20130008, -0.123783074),
(-0.19507432, -0.20020142, -0.117069006),
(0.12878811, -0.19006927, 0.17249061),
(0.12854396, -0.17908262, 0.1721244),
(0.1307413, -0.1594287, 0.17224647),
(0.13110752, -0.15100558, 0.17419966),
(0.1340373, -0.13818781, 0.1721244),
(0.07397687, 0.0050050355, -0.59035003),
(0.08520768, -0.0003662221, -0.5964537),
(0.08337657, -0.003173925, -0.59169286),
(0.09338664, -0.006836146, -0.5975524),
(0.095706046, -0.008667257, -0.598529),
(0.10388501, -0.011963256, -0.5980407),
(0.11365093, -0.016113773, -0.6014588),
(0.11633656, -0.015503403, -0.59974974),
(0.13562426, -0.015991699, -0.59474474),
(0.5608081, -0.1843318, -0.23169653),
(0.55922115, -0.18628499, -0.23035371),
(0.5578784, -0.18799402, -0.22168645),
(0.5564135, -0.18872647, -0.21741386),
(0.55311745, -0.19458602, -0.21094394),
(0.55372787, -0.1947081, -0.20056765),

(0.5562914, -0.1984924, -0.1970275),
(0.24585712, -0.16614276, 0.16699728),
(0.24268319, -0.16919462, 0.16760765),
(-0.19812617, -0.21350749, -0.293466),
(-0.19446394, -0.21338542, -0.303354),
(-0.19177832, -0.21057771, -0.32886747),
(0.21875668, 0.2417066, -0.42847988),
(0.22058779, 0.2454909, -0.4231086),
(0.22717978, 0.25220495, -0.41053498),
(0.22876675, 0.25171667, -0.41224402),
(0.23474838, 0.25928527, -0.40308848),
(0.23987548, 0.2580645, -0.39246804),
(0.13110752, -0.44788966, -0.053102206),
(0.13525803, -0.44544816, -0.05444502),

(0.13220619, -0.44544816, -0.049073763),
(0.13037507, -0.44557023, -0.049439985),
(0.1297647, -0.44459364, -0.052125614),
(0.12756737, -0.4410535, -0.052980132),
(0.124881744, -0.44349498, -0.05139317),
(0.119754635, -0.43812373, -0.044923246),
(0.11670278, -0.43617055, -0.038819544),
(-0.095583975, -0.13794367, -0.50917083),
(-0.08703879, -0.1345256, -0.5158849),
(-0.07739494, -0.123783074, -0.52430797),
(-0.06860561, -0.11365093, -0.5370037),
(-0.0629902, -0.10925627, -0.5400556),
(-0.054811243, -0.10046694, -0.54701376),
(-0.046388134, -0.09375286, -0.550676),
(0.16016114, 0.2722251, -0.4176153),
(0.15466781, 0.27124852, -0.42262033),
(0.08862575, -0.41578418, -0.0040284432),
(0.08117924, -0.4049196, 0.0050050355),
(0.07116917, -0.39649647, 0.011963256),
(0.06567583, -0.38892788, 0.013183996),
(0.0601825, -0.38392285, 0.023071993),
(0.052491836, -0.38294625, 0.026734214),
(0.047975097, -0.37867367, 0.02356029),
(0.03955199, -0.38196966, 0.019531846),
(0.040894803, -0.38074893, 0.022339549),
(-0.0441908, -0.08349864, -0.5544603),
(-0.031617176, -0.074098945, -0.5570238),
(-0.026734214, -0.070558794, -0.55372787),
(-0.0220954, -0.065187536, -0.5666677),
(-0.015259255, -0.052735984, -0.5647145),
(-0.012451552, -0.047364727, -0.5665456),
(-0.006591998, -0.041016877, -0.568865),
(0.038331248, -0.16479996, 0.15271463),
(0.030274361, -0.16760765, 0.15173803),
(0.33265176, -0.07519761, -0.5877865),
(0.33460495, -0.076540425, -0.5854671),
(0.3291116, -0.07629628, -0.5854671),
(0.32837915, -0.0738548, -0.58461255),
(0.33021027, -0.071657464, -0.5885189),
(0.32935575, -0.07983642, -0.59132665),
(0.32850122, -0.0761742, -0.5905942),
(0.33094272, -0.073000275, -0.58986175),
(0.32422864, -0.072878204, -0.5897397),
(-0.14197211, -0.32361826, -0.21094394),
(-0.1462447, -0.32129887, -0.20777002),
(-0.14917448, -0.31714836, -0.20813623),
(-0.14575641, -0.31177709, -0.20728172),
(-0.15149388, -0.3081149, -0.20777002),
(-0.15723136, -0.30225533, -0.20789209),
(-0.15747552, -0.30213323, -0.21094394),
(-0.16541032, -0.2923673, -0.19946899),
(-0.16772974, -0.28711814, -0.19458602),
(0.4430067, -0.27344584, -0.43653676),
(0.4430067, -0.2760094, -0.42823574),
(0.46729943, -0.3437605, -0.2900479),
(0.4636372, -0.34583575, -0.28418836),
(0.46351513, -0.35242775, -0.27613148),
(0.46131778, -0.36085087, -0.26013976),
(0.45777765, -0.36463514, -0.2580645),
(0.253914, 0.17871639, 0.052735984),
(0.26136053, 0.17700736, 0.04834132),
(0.28101444, -0.06994843, -0.6010926),
(0.28199103, -0.07580798, -0.606708),
(0.2811365, -0.071413316, -0.6075625),
(0.2732017, -0.06970428, -0.60805076),
(0.27576524, -0.071535386, -0.60646385),
(0.27723014, -0.07495346, -0.6074404),
(0.27576524, -0.07251198, -0.6113468),
(0.27491075, -0.07641835, -0.60768455),
(0.27369, -0.091677606, -0.6086612),
(-0.20300913, -0.20862453, -0.18262276),
(0.35499132, -0.16357921, 0.12720115),
(0.3431501, -0.16724144, 0.13196203),
(0.33912167, -0.16602069, 0.13330485),
(0.05566576, -0.16162603, 0.1617481),
(0.046998505, -0.16150396, 0.15930662),
(0.039063692, -0.16394544, 0.15112767),
(-0.12915434, -0.23718986, -0.006103702),
(0.048463393, -0.23206274, 0.1312296),

(0.06042665, 0.0003662221, -0.5904721),
(0.069093905, 0.0053712577, -0.5866878),
(0.07275613, 0.0050050355, -0.59096044),
(0.19019136, 0.1429487, 0.07727287),
(0.18970306, 0.13989685, 0.07751702),
(0.18750572, 0.13415937, 0.078981906),
(0.18689536, 0.1353801, 0.08142339),
(0.18701743, 0.13379315, 0.081667535),
(0.1815241, 0.13708915, 0.08032472),
(0.21521653, 0.23303933, -0.4481338),
(0.21436201, 0.23523667, -0.44264045),
(0.21716972, 0.2379223, -0.4377575),
(0.21033357, 0.2402417, -0.44178593),
(0.20862453, 0.23120824, -0.4494766),
(0.20374157, 0.23426008, -0.45155185),
(0.19959106, 0.24671163, -0.44093144),
(0.19714957, 0.25025177, -0.4080935),
(0.1942198, 0.2573321, -0.43043306),
]


def ls_ellipsoid(xx,yy,zz):

   # change xx from vector of length N to Nx1 matrix so we can use hstack
   x = xx[:,np.newaxis]
   y = yy[:,np.newaxis]
   z = zz[:,np.newaxis]

   #  Ax^2 + By^2 + Cz^2 +  Dxy +  Exz +  Fyz +  Gx +  Hy +  Iz = 1
   J = np.hstack((x*x,y*y,z*z,x*y,x*z,y*z, x, y, z))
   K = np.ones_like(x) #column of ones

   print(J.shape, "J SHAPE")

   print("\n\nJ: ", J);

   print("K", K)

   #np.hstack performs a loop over all samples and creates
   #a row in J for each x,y,z sample:
   # J[ix,0] = x[ix]*x[ix]
   # J[ix,1] = y[ix]*y[ix]
   # etc.

   JT=J.transpose()
   JTJ = np.dot(JT,J)
   InvJTJ=np.linalg.inv(JTJ);
   ABC= np.dot(InvJTJ, np.dot(JT,K))

# Rearrange, move the 1 to the other side
#  Ax^2 + By^2 + Cz^2 +  Dxy +  Exz +  Fyz +  Gx +  Hy +  Iz - 1 = 0
#    or
#  Ax^2 + By^2 + Cz^2 +  Dxy +  Exz +  Fyz +  Gx +  Hy +  Iz + J = 0
#  where J = -1
   eansa=np.append(ABC,-1)

   return (eansa)


xx = np.array([pt[0] for pt in points])
yy = np.array([pt[0] for pt in points])
zz = np.array([pt[0] for pt in points])

# ls_ellipsoid(xx, yy, zz)


# This script plots magnetometer data, for visualizing offsets and
# calibration

# https://matplotlib.org/stable/gallery/mplot3d/scatter3d.html#sphx-glr-gallery-mplot3d-scatter3d-py
import matplotlib.pyplot as plt


fig = plt.figure()
ax = fig.add_subplot(projection='3d')


# C+P from println console from device as list of (x, y, z) tuples,
# eg (1., 0., 0.)



for x, y, z in points:
	ax.scatter(x, y, z)

ax.set_title("Magnetometer readings, during a calibration maneuver.")
ax.set_xlabel('Mag X')
ax.set_ylabel('Mag Y')
ax.set_zlabel('Mag Z')

plt.show()