# temp hijacking this
import numpy as np

points = [
	
(-0.058107242, 0.16577655, -0.5229652),
(-0.0634785, 0.17188025, -0.52650535),
(-0.060914945, 0.16675314, -0.5186926),
(-0.06201361, 0.16528825, -0.5173498),
(-0.062379833, 0.16919462, -0.51832634),
(-0.06140324, 0.16724144, -0.51515245),
(-0.059694204, 0.1645558, -0.52455217),
(-0.062623985, 0.16528825, -0.5255287),
(-0.05896176, 0.1645558, -0.5205237),
(-0.060670797, 0.16626485, -0.5229652),
(-0.06335643, 0.1650441, -0.51173437),
(-0.06616413, 0.1683401, -0.51417583),
(-0.0738548, 0.17615284, -0.50917083),
(-0.08667257, 0.19275491, -0.4721824),
(-0.12768945, 0.21399578, -0.49061555),
(-0.19006927, 0.22571489, -0.4528947),
(-0.26514482, 0.227546, -0.3991821),
(-0.2952971, 0.24158452, -0.3503525),
(-0.32886747, 0.3065279, -0.27356791),
(-0.32447278, 0.37025055, -0.19226661),
(-0.27100438, 0.41676077, -0.28003785),
(-0.14209418, 0.4560686, -0.34571368),
(0.017944884, 0.42799157, -0.3969848),
(0.010498367, 0.38673055, -0.44508195),
(-0.0028077029, 0.36414686, -0.46620074),
(0.067873165, 0.28235725, -0.49147007),
(0.12634663, 0.25025177, -0.47999513),
(0.08484146, 0.1815241, -0.49781793),
(0.08728294, 0.11560412, -0.49586475),
(0.05835139, 0.09143346, -0.49574268),
(0.020996734, 0.09363079, -0.49769586),
(-0.063966796, 0.11816767, -0.4998932),
(-0.051637318, 0.14893033, -0.5047761),
(-0.009521775, 0.19946899, -0.5036775),
(-0.003540147, 0.28772852, -0.48402357),
(0.025635548, 0.377575, -0.4179815),
(0.01904355, 0.44215217, -0.33179724),
(0.021973327, 0.47230446, -0.20325327),
(0.07397687, 0.4213996, -0.04260384),
(0.0921659, 0.3060396, 0.06591998),
(0.028199103, 0.14123966, 0.12634663),
(-0.032105472, -0.006836146, 0.08703879),
(-0.02929777, -0.09253212, -0.0081789605),
(-0.07483139, -0.1345256, -0.14917448),
(-0.053956725, -0.10449538, -0.3192236),
(0.0413831, -0.041016877, -0.38172552),
(0.06640828, 0.0051271096, -0.40821558),
(0.04931791, 0.052980132, -0.44508195),
(0.026367992, 0.13721122, -0.46790978),
(0.0013428144, 0.23780023, -0.4707175),
(-0.06738487, 0.33936584, -0.41090122),
(-0.13599049, 0.4170049, -0.3183691),
(-0.17407759, 0.42518386, -0.27014986),
(-0.17114781, 0.43470564, -0.2764977),
(-0.18225653, 0.40089116, -0.35157323),
(-0.16296884, 0.30738243, -0.42542803),
(-0.10229804, 0.2511063, -0.47474593),
(-0.071657464, 0.15845211, -0.48072755),
(-0.089358196, 0.1180456, -0.4655904),
(-0.17761773, 0.130253, -0.42799157),
(-0.26209295, 0.13721122, -0.35096285),
(-0.31043428, 0.19287698, -0.2656331),
(-0.31678212, 0.18567461, -0.20703757),
(-0.3037202, 0.19775994, -0.088137455),
(-0.2797937, 0.22791223, -0.053346355),
(-0.2323069, 0.2552568, -0.0014648885),
(-0.13135166, 0.26551104, 0.063966796),
(-0.06799524, 0.24268319, 0.08471938),
(0.014160588, 0.27088228, 0.06701865),
(0.08496353, 0.31336406, 0.027466659),
(0.14087345, 0.34644613, -0.036378063),
(0.1848201, 0.34266183, -0.08508561),
(0.19556262, 0.3579211, -0.1241493),
(0.2229072, 0.33960998, -0.22095402),
(0.23865475, 0.28199103, -0.31495103),
(0.19312114, 0.21045564, -0.4331187),
(0.1297647, 0.15393536, -0.48988312),
(0.06884976, 0.084475234, -0.49427778),
(0.036378063, 0.03869747, -0.50428784),
(-0.028565325, 0.023071993, -0.5051424),
(-0.13611256, 0.04235969, -0.491348),
(-0.29224524, 0.08203375, -0.40406507),
(-0.32654804, 0.08349864, -0.35254982),
(-0.34290597, 0.086794645, -0.30835903),
(-0.36793116, 0.10132145, -0.21839045),
(-0.36805323, 0.13623463, -0.11902219),
(-0.35840937, 0.19959106, -0.071657464),
(-0.35987428, 0.22986542, -0.1081576),
(-0.37586597, 0.25562304, -0.16602069),
(-0.35193944, 0.22363964, -0.3249611),
(-0.33826715, 0.23731193, -0.346202),
(-0.35474715, 0.24341564, -0.31092256),
(-0.34632406, 0.26013976, -0.3070162),
(-0.36658832, 0.26123846, -0.27088228),
(-0.38172552, 0.24329355, -0.18396558),
(-0.37415692, 0.2290109, -0.081667535),
(-0.3291116, 0.2252266, 0.019898068),
(-0.26111636, 0.18445387, 0.08008057),
(-0.1739555, 0.15857418, 0.123416856),
(-0.102053896, 0.1358684, 0.130253),
]

def ls_ellipsoid(xx,yy,zz):

   # change xx from vector of length N to Nx1 matrix so we can use hstack
   x = xx[:,np.newaxis]
   y = yy[:,np.newaxis]
   z = zz[:,np.newaxis]

   #  Ax^2 + By^2 + Cz^2 +  Dxy +  Exz +  Fyz +  Gx +  Hy +  Iz = 1
   J = np.hstack((x*x,y*y,z*z,x*y,x*z,y*z, x, y, z))
   K = np.ones_like(x) #column of ones

   print(J.shape, "J SHAPE")

   print("\n\nJ: ", J);

   print("K", K)

   #np.hstack performs a loop over all samples and creates
   #a row in J for each x,y,z sample:
   # J[ix,0] = x[ix]*x[ix]
   # J[ix,1] = y[ix]*y[ix]
   # etc.

   JT=J.transpose()
   JTJ = np.dot(JT,J)
   InvJTJ=np.linalg.inv(JTJ);
   ABC= np.dot(InvJTJ, np.dot(JT,K))

# Rearrange, move the 1 to the other side
#  Ax^2 + By^2 + Cz^2 +  Dxy +  Exz +  Fyz +  Gx +  Hy +  Iz - 1 = 0
#    or
#  Ax^2 + By^2 + Cz^2 +  Dxy +  Exz +  Fyz +  Gx +  Hy +  Iz + J = 0
#  where J = -1
   eansa=np.append(ABC,-1)

   return (eansa)


xx = np.array([pt[0] for pt in points])
yy = np.array([pt[0] for pt in points])
zz = np.array([pt[0] for pt in points])

# ls_ellipsoid(xx, yy, zz)


# This script plots magnetometer data, for visualizing offsets and
# calibration

# https://matplotlib.org/stable/gallery/mplot3d/scatter3d.html#sphx-glr-gallery-mplot3d-scatter3d-py
import matplotlib.pyplot as plt


fig = plt.figure()
ax = fig.add_subplot(projection='3d')


# C+P from println console from device as list of (x, y, z) tuples,
# eg (1., 0., 0.)



for x, y, z in points:
	ax.scatter(x, y, z)

ax.set_title("Magnetometer readings, during a calibration maneuver.")
ax.set_xlabel('Mag X')
ax.set_ylabel('Mag Y')
ax.set_zlabel('Mag Z')

plt.show()